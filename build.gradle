plugins {
    //id 'java-library'
    id 'application'
    id 'war'
}

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
    options.compilerArgs.addAll(['--release', '11'])
}

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch" }
}

def ilivalidatorVersion = project.hasProperty('ilivalidatorVersion') ? project.ilivalidatorVersion : '1.14.3'
def dataDirectory = project.hasProperty('data') ? project.data : './src/test/data'
def config = project.hasProperty('config') ? project.config : './src/test/data/models/DMAV_V1_0_Validierung.ini'
def modeldir = project.hasProperty('modeldir') ? project.modeldir : './src/test/data/models/'
def logFile = project.hasProperty('log') ? project.log : './testbed.log'

dependencies {
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation "ch.interlis:ilivalidator:${ilivalidatorVersion}"
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-simple:1.7.36'
}

application {
    mainClass = 'ch.interlis.testbed.Main'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Der Exit-Code der Ausf√ºhrung soll sich durchgereicht werden, damit man in der Konsole
// weiss, ob ein Fehler (Widerspruch zwischen Soll und Ist) gefunden wurde.
/*
run {
    args = ["--data", dataDirectory, "--config", config, "--modeldir", modeldir, "--Dorg.slf4j.simpleLogger.logFile", logFile]
}
*/

task runProgram(type: JavaExec) {
    main = 'ch.interlis.testbed.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '--data', dataDirectory, '--config', config, '--modeldir', modeldir, '--Dorg.slf4j.simpleLogger.logFile', logFile
    ignoreExitValue = true
}

runProgram.doLast {
    def exitValue = runProgram.executionResult.get().exitValue
    if (exitValue != 0) {
        throw new GradleException("Program exited with code " + exitValue)
    }
}



